
import "~/styles/globals.css";

// import { type Metadata } from "next";
import { Geist } from "next/font/google";

import { api, TRPCReactProvider } from "~/trpc/react";

import { Toaster } from "~/components/ui/sonner"
import { SidebarProvider, SidebarTrigger } from "~/components/ui/sidebar";
import { AppSidebar } from "~/components/app-sidebar";
import { auth } from "~/lib/auth";
import { headers } from "next/headers";

// import { authClient } from "~/lib/auth-client"
// import { useEffect, useState } from "react";

// import { AppSidebar } from "~/components/app-sidebar"
// import {
//   Breadcrumb,
//   BreadcrumbItem,
//   BreadcrumbLink,
//   BreadcrumbList,
//   BreadcrumbPage,
//   BreadcrumbSeparator,
// } from "~/components/ui/breadcrumb"
// import { Separator } from "~/components/ui/separator"
// import {
//   SidebarInset,
//   SidebarProvider,
//   SidebarTrigger,
// } from "~/components/ui/sidebar"



// export const metadata: Metadata = {
//   title: "Create T3 App",
//   description: "Generated by create-t3-app",
//   icons: [{ rel: "icon", url: "/favicon.ico" }],
// };

const geist = Geist({
  subsets: ["latin"],
  variable: "--font-geist-sans",
});

export default async function RootLayout({
  children,
}: Readonly<{ children: React.ReactNode }>) {

  // Get user authentication status
  const session = await auth.api.getSession({
    headers: await headers(),
  });
  // // Define the type for your session, or import it if available
  // type SessionType = Awaited<ReturnType<typeof authClient.getSession>>;

  // const [session, setSession] = useState<SessionType | null>(null);

  // useEffect(() => {
  //   const fetchSession = async () => {
  //     const sessionData = await authClient.getSession(); // Replace with your client-side session fetch logic
  //     setSession(sessionData);
  //   };

  //   fetchSession();
  // }, [])
  // if (!session?.user) {
  //     console.log("User not authenticated, redirecting to login");
  //     return new Response(JSON.stringify({ error: 'Unauthorized' }), { status: 401 });
  // }

  return (
    <html lang="en" className={`${geist.variable}`}>
      <body>

        <SidebarProvider defaultOpen={false}>
          {/* <AppSidebar chatItems={chatItems} /> */}
          {!session?.user && <AppSidebar />}
          {/* <TRPCReactProvider><AppSidebar /></TRPCReactProvider> */}
          <SidebarTrigger />
          {/* <SidebarInset>  */}
          <div style={{ flex: 1 }}>
            <TRPCReactProvider>{children}</TRPCReactProvider>
          </div>
          {/* </SidebarInset> */}
        </SidebarProvider>
        <Toaster />

      </body>
    </html >
  );
}
